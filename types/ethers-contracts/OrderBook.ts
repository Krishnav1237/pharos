/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "addAssetPair(address,address,bool,uint256)": FunctionFragment;
    "assetPairKeys(uint256)": FunctionFragment;
    "assetPairs(bytes32)": FunctionFragment;
    "buyOrders(bytes32,uint256,uint256)": FunctionFragment;
    "buyPricePoints(bytes32,uint256)": FunctionFragment;
    "calculateFee(uint256,uint256)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "cleanupExpiredOrders(uint256[])": FunctionFragment;
    "createOrder(address,address,uint256,uint256,uint8,uint8)": FunctionFragment;
    "createOrderWithExpiry(address,address,uint256,uint256,uint8,uint8,uint256)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "getBestPrices(address,address)": FunctionFragment;
    "getTraderOrders(address,uint256,uint256)": FunctionFragment;
    "matchingEngine()": FunctionFragment;
    "nextOrderId()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellOrders(bytes32,uint256,uint256)": FunctionFragment;
    "sellPricePoints(bytes32,uint256)": FunctionFragment;
    "setAssetPairStatus(bytes32,bool)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setMatchingEngine(address)": FunctionFragment;
    "setTradingFee(uint256)": FunctionFragment;
    "tradingFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateOrderAfterMatch(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAssetPair"
      | "assetPairKeys"
      | "assetPairs"
      | "buyOrders"
      | "buyPricePoints"
      | "calculateFee"
      | "cancelOrder"
      | "cleanupExpiredOrders"
      | "createOrder"
      | "createOrderWithExpiry"
      | "feeCollector"
      | "getBestPrices"
      | "getTraderOrders"
      | "matchingEngine"
      | "nextOrderId"
      | "orders"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "sellOrders"
      | "sellPricePoints"
      | "setAssetPairStatus"
      | "setFeeCollector"
      | "setMatchingEngine"
      | "setTradingFee"
      | "tradingFee"
      | "transferOwnership"
      | "unpause"
      | "updateOrderAfterMatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAssetPair",
    values: [string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPairKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPairs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOrders",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyPricePoints",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupExpiredOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrderWithExpiry",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPrices",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderOrders",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchingEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrders",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellPricePoints",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetPairStatus",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatchingEngine",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOrderAfterMatch",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAssetPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPairKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetPairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyPricePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanupExpiredOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrderWithExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchingEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellPricePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetPairStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMatchingEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderAfterMatch",
    data: BytesLike
  ): Result;

  events: {
    "AssetPairAdded(bytes32,address,address,uint256)": EventFragment;
    "AssetPairStatusChanged(bytes32,bool)": EventFragment;
    "FeeCollectorUpdated(address)": EventFragment;
    "MatchingEngineUpdated(address)": EventFragment;
    "OrderCancelled(uint256)": EventFragment;
    "OrderCreated(uint256,address,address,address,uint256,uint256,uint8,uint8)": EventFragment;
    "OrderExpired(uint256)": EventFragment;
    "OrderFilled(uint256,uint256)": EventFragment;
    "OrderPartiallyFilled(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TradingFeeUpdated(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetPairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetPairStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchingEngineUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPartiallyFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AssetPairAddedEventObject {
  pairKey: string;
  tokenAsset: string;
  paymentAsset: string;
  minPriceIncrement: BigNumber;
}
export type AssetPairAddedEvent = TypedEvent<
  [string, string, string, BigNumber],
  AssetPairAddedEventObject
>;

export type AssetPairAddedEventFilter = TypedEventFilter<AssetPairAddedEvent>;

export interface AssetPairStatusChangedEventObject {
  pairKey: string;
  isActive: boolean;
}
export type AssetPairStatusChangedEvent = TypedEvent<
  [string, boolean],
  AssetPairStatusChangedEventObject
>;

export type AssetPairStatusChangedEventFilter =
  TypedEventFilter<AssetPairStatusChangedEvent>;

export interface FeeCollectorUpdatedEventObject {
  newFeeCollector: string;
}
export type FeeCollectorUpdatedEvent = TypedEvent<
  [string],
  FeeCollectorUpdatedEventObject
>;

export type FeeCollectorUpdatedEventFilter =
  TypedEventFilter<FeeCollectorUpdatedEvent>;

export interface MatchingEngineUpdatedEventObject {
  newMatchingEngine: string;
}
export type MatchingEngineUpdatedEvent = TypedEvent<
  [string],
  MatchingEngineUpdatedEventObject
>;

export type MatchingEngineUpdatedEventFilter =
  TypedEventFilter<MatchingEngineUpdatedEvent>;

export interface OrderCancelledEventObject {
  orderId: BigNumber;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  trader: string;
  tokenAsset: string;
  paymentAsset: string;
  amount: BigNumber;
  price: BigNumber;
  orderType: number;
  side: number;
}
export type OrderCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, number, number],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderExpiredEventObject {
  orderId: BigNumber;
}
export type OrderExpiredEvent = TypedEvent<
  [BigNumber],
  OrderExpiredEventObject
>;

export type OrderExpiredEventFilter = TypedEventFilter<OrderExpiredEvent>;

export interface OrderFilledEventObject {
  orderId: BigNumber;
  filledAmount: BigNumber;
}
export type OrderFilledEvent = TypedEvent<
  [BigNumber, BigNumber],
  OrderFilledEventObject
>;

export type OrderFilledEventFilter = TypedEventFilter<OrderFilledEvent>;

export interface OrderPartiallyFilledEventObject {
  orderId: BigNumber;
  filledAmount: BigNumber;
}
export type OrderPartiallyFilledEvent = TypedEvent<
  [BigNumber, BigNumber],
  OrderPartiallyFilledEventObject
>;

export type OrderPartiallyFilledEventFilter =
  TypedEventFilter<OrderPartiallyFilledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TradingFeeUpdatedEventObject {
  newFee: BigNumber;
}
export type TradingFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  TradingFeeUpdatedEventObject
>;

export type TradingFeeUpdatedEventFilter =
  TypedEventFilter<TradingFeeUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAssetPair(
      _tokenAsset: string,
      _paymentAsset: string,
      _isActive: boolean,
      _minPriceIncrement: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    assetPairKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetPairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber] & {
        tokenAsset: string;
        paymentAsset: string;
        isActive: boolean;
        minPriceIncrement: BigNumber;
      }
    >;

    buyOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateFee(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cleanupExpiredOrders(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createOrder(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createOrderWithExpiry(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getBestPrices(
      _tokenAsset: string,
      _paymentAsset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bestBuyPrice: BigNumber;
        bestSellPrice: BigNumber;
      }
    >;

    getTraderOrders(
      trader: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    matchingEngine(overrides?: CallOverrides): Promise<[string]>;

    nextOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number
      ] & {
        id: BigNumber;
        trader: string;
        tokenAsset: string;
        paymentAsset: string;
        amount: BigNumber;
        price: BigNumber;
        filled: BigNumber;
        timestamp: BigNumber;
        expiry: BigNumber;
        orderType: number;
        side: number;
        status: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sellOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAssetPairStatus(
      _pairKey: BytesLike,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMatchingEngine(
      _matchingEngine: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTradingFee(
      _tradingFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tradingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOrderAfterMatch(
      _orderId: BigNumberish,
      _filledAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addAssetPair(
    _tokenAsset: string,
    _paymentAsset: string,
    _isActive: boolean,
    _minPriceIncrement: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  assetPairKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  assetPairs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber] & {
      tokenAsset: string;
      paymentAsset: string;
      isActive: boolean;
      minPriceIncrement: BigNumber;
    }
  >;

  buyOrders(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyPricePoints(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateFee(
    _amount: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOrder(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cleanupExpiredOrders(
    orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createOrder(
    _tokenAsset: string,
    _paymentAsset: string,
    _amount: BigNumberish,
    _price: BigNumberish,
    _orderType: BigNumberish,
    _side: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createOrderWithExpiry(
    _tokenAsset: string,
    _paymentAsset: string,
    _amount: BigNumberish,
    _price: BigNumberish,
    _orderType: BigNumberish,
    _side: BigNumberish,
    _expiryDuration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getBestPrices(
    _tokenAsset: string,
    _paymentAsset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      bestBuyPrice: BigNumber;
      bestSellPrice: BigNumber;
    }
  >;

  getTraderOrders(
    trader: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  matchingEngine(overrides?: CallOverrides): Promise<string>;

  nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number
    ] & {
      id: BigNumber;
      trader: string;
      tokenAsset: string;
      paymentAsset: string;
      amount: BigNumber;
      price: BigNumber;
      filled: BigNumber;
      timestamp: BigNumber;
      expiry: BigNumber;
      orderType: number;
      side: number;
      status: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sellOrders(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellPricePoints(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAssetPairStatus(
    _pairKey: BytesLike,
    _isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMatchingEngine(
    _matchingEngine: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTradingFee(
    _tradingFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOrderAfterMatch(
    _orderId: BigNumberish,
    _filledAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAssetPair(
      _tokenAsset: string,
      _paymentAsset: string,
      _isActive: boolean,
      _minPriceIncrement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetPairKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    assetPairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber] & {
        tokenAsset: string;
        paymentAsset: string;
        isActive: boolean;
        minPriceIncrement: BigNumber;
      }
    >;

    buyOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanupExpiredOrders(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOrderWithExpiry(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      _expiryDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getBestPrices(
      _tokenAsset: string,
      _paymentAsset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        bestBuyPrice: BigNumber;
        bestSellPrice: BigNumber;
      }
    >;

    getTraderOrders(
      trader: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    matchingEngine(overrides?: CallOverrides): Promise<string>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number
      ] & {
        id: BigNumber;
        trader: string;
        tokenAsset: string;
        paymentAsset: string;
        amount: BigNumber;
        price: BigNumber;
        filled: BigNumber;
        timestamp: BigNumber;
        expiry: BigNumber;
        orderType: number;
        side: number;
        status: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetPairStatus(
      _pairKey: BytesLike,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMatchingEngine(
      _matchingEngine: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradingFee(
      _tradingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateOrderAfterMatch(
      _orderId: BigNumberish,
      _filledAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetPairAdded(bytes32,address,address,uint256)"(
      pairKey?: BytesLike | null,
      tokenAsset?: null,
      paymentAsset?: null,
      minPriceIncrement?: null
    ): AssetPairAddedEventFilter;
    AssetPairAdded(
      pairKey?: BytesLike | null,
      tokenAsset?: null,
      paymentAsset?: null,
      minPriceIncrement?: null
    ): AssetPairAddedEventFilter;

    "AssetPairStatusChanged(bytes32,bool)"(
      pairKey?: BytesLike | null,
      isActive?: null
    ): AssetPairStatusChangedEventFilter;
    AssetPairStatusChanged(
      pairKey?: BytesLike | null,
      isActive?: null
    ): AssetPairStatusChangedEventFilter;

    "FeeCollectorUpdated(address)"(
      newFeeCollector?: null
    ): FeeCollectorUpdatedEventFilter;
    FeeCollectorUpdated(newFeeCollector?: null): FeeCollectorUpdatedEventFilter;

    "MatchingEngineUpdated(address)"(
      newMatchingEngine?: null
    ): MatchingEngineUpdatedEventFilter;
    MatchingEngineUpdated(
      newMatchingEngine?: null
    ): MatchingEngineUpdatedEventFilter;

    "OrderCancelled(uint256)"(
      orderId?: BigNumberish | null
    ): OrderCancelledEventFilter;
    OrderCancelled(orderId?: BigNumberish | null): OrderCancelledEventFilter;

    "OrderCreated(uint256,address,address,address,uint256,uint256,uint8,uint8)"(
      orderId?: BigNumberish | null,
      trader?: string | null,
      tokenAsset?: null,
      paymentAsset?: null,
      amount?: null,
      price?: null,
      orderType?: null,
      side?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: BigNumberish | null,
      trader?: string | null,
      tokenAsset?: null,
      paymentAsset?: null,
      amount?: null,
      price?: null,
      orderType?: null,
      side?: null
    ): OrderCreatedEventFilter;

    "OrderExpired(uint256)"(
      orderId?: BigNumberish | null
    ): OrderExpiredEventFilter;
    OrderExpired(orderId?: BigNumberish | null): OrderExpiredEventFilter;

    "OrderFilled(uint256,uint256)"(
      orderId?: BigNumberish | null,
      filledAmount?: null
    ): OrderFilledEventFilter;
    OrderFilled(
      orderId?: BigNumberish | null,
      filledAmount?: null
    ): OrderFilledEventFilter;

    "OrderPartiallyFilled(uint256,uint256)"(
      orderId?: BigNumberish | null,
      filledAmount?: null
    ): OrderPartiallyFilledEventFilter;
    OrderPartiallyFilled(
      orderId?: BigNumberish | null,
      filledAmount?: null
    ): OrderPartiallyFilledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TradingFeeUpdated(uint256)"(newFee?: null): TradingFeeUpdatedEventFilter;
    TradingFeeUpdated(newFee?: null): TradingFeeUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addAssetPair(
      _tokenAsset: string,
      _paymentAsset: string,
      _isActive: boolean,
      _minPriceIncrement: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    assetPairKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetPairs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    buyOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cleanupExpiredOrders(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createOrder(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createOrderWithExpiry(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getBestPrices(
      _tokenAsset: string,
      _paymentAsset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderOrders(
      trader: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchingEngine(overrides?: CallOverrides): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sellOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAssetPairStatus(
      _pairKey: BytesLike,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMatchingEngine(
      _matchingEngine: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTradingFee(
      _tradingFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateOrderAfterMatch(
      _orderId: BigNumberish,
      _filledAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAssetPair(
      _tokenAsset: string,
      _paymentAsset: string,
      _isActive: boolean,
      _minPriceIncrement: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    assetPairKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetPairs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFee(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cleanupExpiredOrders(
      orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createOrder(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createOrderWithExpiry(
      _tokenAsset: string,
      _paymentAsset: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderType: BigNumberish,
      _side: BigNumberish,
      _expiryDuration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBestPrices(
      _tokenAsset: string,
      _paymentAsset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderOrders(
      trader: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchingEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sellOrders(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellPricePoints(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetPairStatus(
      _pairKey: BytesLike,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMatchingEngine(
      _matchingEngine: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTradingFee(
      _tradingFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tradingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOrderAfterMatch(
      _orderId: BigNumberish,
      _filledAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
